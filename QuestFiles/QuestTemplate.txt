namespace ParallelZodiac
{
    class [[QUESTCLASS]] : Quest
    {
        public [[QUESTCLASS]]()
        {
            QuestID          = [[QUESTID]];
			StepKey          = QuestID.ToString() + StepKey;
            QuestName        = "[[QUESTNAME]]";
            QuestDescription = "[[QUESTDESCRIPTION]]";
            Version          = "[[QUESTVERSION]]";
            CurrentStepID    = GetInt(StepKey, 0);
            Steps.Add(CurrentStep);

			CreateFirstStep();
            CreateSteps();
            CreateDetails();
        }

        void CreateSteps()
        {
[[STEPCREATION]]
        }
        public void CreateDetails()
        {
[[DETAILCREATION]]
        }

        Step CreateFirstStep()
        {
            Step step = new Step();
            step.ID = 0;
            step.QuestID = QuestID;
            step.StepName = "Quest Locked";

            return step;
        }
        Step CreateStep(int id, int questID, string name, string dialogue, string exDialogue, bool useGeneric, bool useTyped, string reward, string rewardAmount, int attempts, int attemptsCompleted)
        {
            Step step = new Step();
            step.ID = id;
			step.AttemptsKey = id.ToString() + step.AttemptsKey;
            step.QuestID = questID;
            step.StepName = name;
            step.Dialogue = dialogue;
            step.ExceptionDialogue = exDialogue;
            step.UseGeneric = useGeneric;
            step.UseTyped = useTyped;
			step.AmountOfAttempts = attempts;
			step.AttemptsCompleted = GetInt(step.AttemptsKey, attemptsCompleted);
			
			if(!reward.Contains('|'))
			{
				step.Reward.Add(GameObject.Find(reward), rewardAmount);
			}
			else
			{
				var splitReward = reward.Split('|');
				var splitAmount = rewardAmount.Split('|');

				for(int i = 0; i < splitReward.Count(); i++)
				{
					step.Reward.Add(GameObject.Find(splitReward[i]), Convert.ToInt32(splitAmount[i]));
				}
			}

            return step;
        }
        Detail CreateDetail(int id, int stepID, string activeEntity, int action, int amount, float timerLength, /*DateTime dateLimit,*/ string passiveEntity)
        {
            //TODO: If entity is Player, do I need to do a find by tag?
            Detail detail = new Detail();
            detail.ID = id;
			detail.StateKey = id.ToString() + detail.StateKey;
            detail.StepID = stepID;
            detail.ActiveEntity = GameObject.Find(activeEntity); //Find by tag instead?
            detail.Action = action;
            detail.Amount = amount;
            detail.TimerLength = timerLength;
            detail.PassiveEntity = GameObject.Find(passiveEntity);
            detail.SetupDetail();
            return detail;
        }
    }
}